--- drivers/usb/core/config.c
+++ drivers/usb/core/config.c
@@ -201,17 +201,6 @@
 			if (n == 0)
 				n = 9;	/* 32 ms = 2^(9-1) uframes */
 			j = 16;
-
-			/*
-			 * Adjust bInterval for quirked devices.
-			 * This quirk fixes bIntervals reported in
-			 * linear microframes.
-			 */
-			if (to_usb_device(ddev)->quirks &
-				USB_QUIRK_LINEAR_UFRAME_INTR_BINTERVAL) {
-				n = clamp(fls(d->bInterval), i, j);
-				i = j = n;
-			}
 			break;
 		default:		/* USB_SPEED_FULL or _LOW */
 			/* For low-speed, 10 ms is the official minimum.
@@ -435,8 +424,7 @@
 
 	memcpy(&config->desc, buffer, USB_DT_CONFIG_SIZE);
 	if (config->desc.bDescriptorType != USB_DT_CONFIG ||
-	    config->desc.bLength < USB_DT_CONFIG_SIZE ||
-	    config->desc.bLength > size) {
+	    config->desc.bLength < USB_DT_CONFIG_SIZE) {
 		dev_err(ddev, "invalid descriptor for config index %d: "
 		    "type = 0x%X, length = %d\n", cfgidx,
 		    config->desc.bDescriptorType, config->desc.bLength);
@@ -662,6 +650,10 @@
  *
  * hub-only!! ... and only in reset path, or usb_new_device()
  * (used by real hubs and virtual root hubs)
+ *
+ * NOTE: if this is a WUSB device and is not authorized, we skip the
+ *       whole thing. A non-authorized USB device has no
+ *       configurations.
  */
 int usb_get_configuration(struct usb_device *dev)
 {
@@ -673,6 +665,8 @@
 	struct usb_config_descriptor *desc;
 
 	cfgno = 0;
+	if (dev->authorized == 0)	/* Not really an error */
+		goto out_not_authorized;
 	result = -ENOMEM;
 	if (ncfg > USB_MAXCONFIG) {
 		dev_warn(ddev, "too many configurations: %d, "
@@ -754,6 +748,7 @@
 
 err:
 	kfree(desc);
+out_not_authorized:
 	dev->descriptor.bNumConfigurations = cfgno;
 err2:
 	if (result == -ENOMEM)
