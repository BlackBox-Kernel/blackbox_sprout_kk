--- drivers/usb/host/pci-quirks.c
+++ drivers/usb/host/pci-quirks.c
@@ -467,8 +464,7 @@
 {
 	void __iomem *base;
 	u32 control;
-	u32 fminterval = 0;
-	bool no_fminterval = false;
+	u32 fminterval;
 	int cnt;
 
 	if (!mmio_resource_enabled(pdev, 0))
@@ -478,13 +474,6 @@
 	if (base == NULL)
 		return;
 
-	/*
-	 * ULi M5237 OHCI controller locks the whole system when accessing
-	 * the OHCI_FMINTERVAL offset.
-	 */
-	if (pdev->vendor == PCI_VENDOR_ID_AL && pdev->device == 0x5237)
-		no_fminterval = true;
-
 	control = readl(base + OHCI_CONTROL);
 
 /* On PA-RISC, PDC can leave IR set incorrectly; ignore it there. */
@@ -523,9 +512,7 @@
 	}
 
 	/* software reset of the controller, preserving HcFmInterval */
-	if (!no_fminterval)
-		fminterval = readl(base + OHCI_FMINTERVAL);
-
+	fminterval = readl(base + OHCI_FMINTERVAL);
 	writel(OHCI_HCR, base + OHCI_CMDSTATUS);
 
 	/* reset requires max 10 us delay */
@@ -534,9 +521,7 @@
 			break;
 		udelay(1);
 	}
-
-	if (!no_fminterval)
-		writel(fminterval, base + OHCI_FMINTERVAL);
+	writel(fminterval, base + OHCI_FMINTERVAL);
 
 	/* Now the controller is safely in SUSPEND and nothing can wake it up */
 	iounmap(base);
