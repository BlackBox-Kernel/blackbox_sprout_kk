--- drivers/usb/serial/keyspan.c
+++ drivers/usb/serial/keyspan.c
@@ -323,28 +323,24 @@
 		if ((data[0] & 0x80) == 0) {
 			/* no errors on individual bytes, only
 			   possible overrun err */
-			if (data[0] & RXERROR_OVERRUN) {
-				tty_insert_flip_char(tty, 0, TTY_OVERRUN);
-			}
+			if (data[0] & RXERROR_OVERRUN)
+				err = TTY_OVERRUN;
+			else
+				err = 0;
 			for (i = 1; i < urb->actual_length ; ++i)
-				tty_insert_flip_char(tty, data[i], TTY_NORMAL);
+				tty_insert_flip_char(tty, data[i], err);
 		} else {
 			/* some bytes had errors, every byte has status */
 			dbg("%s - RX error!!!!", __func__);
 			for (i = 0; i + 1 < urb->actual_length; i += 2) {
-				int stat = data[i];
-				int flag = TTY_NORMAL;
-
-				if (stat & RXERROR_OVERRUN) {
-					tty_insert_flip_char(tty, 0,
-								TTY_OVERRUN);
-				}
+				int stat = data[i], flag = 0;
+				if (stat & RXERROR_OVERRUN)
+					flag |= TTY_OVERRUN;
+				if (stat & RXERROR_FRAMING)
+					flag |= TTY_FRAME;
+				if (stat & RXERROR_PARITY)
+					flag |= TTY_PARITY;
 				/* XXX should handle break (0x10) */
-				if (stat & RXERROR_PARITY)
-					flag = TTY_PARITY;
-				else if (stat & RXERROR_FRAMING)
-					flag = TTY_FRAME;
-
 				tty_insert_flip_char(tty, data[i+1], flag);
 			}
 		}
@@ -716,19 +712,14 @@
 		} else {
 			/* some bytes had errors, every byte has status */
 			for (i = 0; i + 1 < urb->actual_length; i += 2) {
-				int stat = data[i];
-				int flag = TTY_NORMAL;
-
-				if (stat & RXERROR_OVERRUN) {
-					tty_insert_flip_char(tty, 0,
-								TTY_OVERRUN);
-				}
+				int stat = data[i], flag = 0;
+				if (stat & RXERROR_OVERRUN)
+					flag |= TTY_OVERRUN;
+				if (stat & RXERROR_FRAMING)
+					flag |= TTY_FRAME;
+				if (stat & RXERROR_PARITY)
+					flag |= TTY_PARITY;
 				/* XXX should handle break (0x10) */
-				if (stat & RXERROR_PARITY)
-					flag = TTY_PARITY;
-				else if (stat & RXERROR_FRAMING)
-					flag = TTY_FRAME;
-
 				tty_insert_flip_char(tty, data[i+1], flag);
 			}
 		}
@@ -788,19 +779,14 @@
 				 * some bytes had errors, every byte has status
 				 */
 				for (x = 0; x + 1 < len; x += 2) {
-					int stat = data[i];
-					int flag = TTY_NORMAL;
-
-					if (stat & RXERROR_OVERRUN) {
-						tty_insert_flip_char(tty, 0,
-								TTY_OVERRUN);
-					}
+					int stat = data[i], flag = 0;
+					if (stat & RXERROR_OVERRUN)
+						flag |= TTY_OVERRUN;
+					if (stat & RXERROR_FRAMING)
+						flag |= TTY_FRAME;
+					if (stat & RXERROR_PARITY)
+						flag |= TTY_PARITY;
 					/* XXX should handle break (0x10) */
-					if (stat & RXERROR_PARITY)
-						flag = TTY_PARITY;
-					else if (stat & RXERROR_FRAMING)
-						flag = TTY_FRAME;
-
 					tty_insert_flip_char(tty,
 							data[i+1], flag);
 					i += 2;
@@ -858,32 +844,25 @@
 			if ((data[0] & 0x80) == 0) {
 				/* no errors on individual bytes, only
 				   possible overrun err*/
-				if (data[0] & RXERROR_OVERRUN) {
-					tty_insert_flip_char(tty, 0,
-								TTY_OVERRUN);
-				}
+				if (data[0] & RXERROR_OVERRUN)
+					err = TTY_OVERRUN;
+				else
+					err = 0;
 				for (i = 1; i < urb->actual_length ; ++i)
 					tty_insert_flip_char(tty, data[i],
-								TTY_NORMAL);
+									err);
 			}  else {
 			/* some bytes had errors, every byte has status */
 				dbg("%s - RX error!!!!", __func__);
 				for (i = 0; i + 1 < urb->actual_length; i += 2) {
-					int stat = data[i];
-					int flag = TTY_NORMAL;
-
-					if (stat & RXERROR_OVERRUN) {
-						tty_insert_flip_char(
-								tty, 0,
-								TTY_OVERRUN);
-					}
-
+					int stat = data[i], flag = 0;
+					if (stat & RXERROR_OVERRUN)
+						flag |= TTY_OVERRUN;
+					if (stat & RXERROR_FRAMING)
+						flag |= TTY_FRAME;
+					if (stat & RXERROR_PARITY)
+						flag |= TTY_PARITY;
 					/* XXX should handle break (0x10) */
-					if (stat & RXERROR_PARITY)
-						flag = TTY_PARITY;
-					else if (stat & RXERROR_FRAMING)
-						flag = TTY_FRAME;
-
 					tty_insert_flip_char(tty, data[i+1],
 									flag);
 				}
@@ -1726,7 +1705,7 @@
 	d_details = s_priv->device_details;
 	device_port = port->number - port->serial->minor;
 
-	outcont_urb = d_details->outcont_endpoints[device_port];
+	outcont_urb = d_details->outcont_endpoints[port->number];
 	this_urb = p_priv->outcont_urb;
 
 	dbg("%s - endpoint %d", __func__, usb_pipeendpoint(this_urb->pipe));
@@ -2507,7 +2486,7 @@
 	if (d_details == NULL) {
 		dev_err(&serial->dev->dev, "%s - unknown product id %x\n",
 		    __func__, le16_to_cpu(serial->dev->descriptor.idProduct));
-		return -ENODEV;
+		return 1;
 	}
 
 	/* Setup private data for serial driver */
