--- fs/isofs/rock.c
+++ fs/isofs/rock.c
@@ -30,7 +30,6 @@
 	int cont_size;
 	int cont_extent;
 	int cont_offset;
-	int cont_loops;
 	struct inode *inode;
 };
 
@@ -74,9 +73,6 @@
 	rs->inode = inode;
 }
 
-/* Maximum number of Rock Ridge continuation entries */
-#define RR_MAX_CE_ENTRIES 32
-
 /*
  * Returns 0 if the caller should continue scanning, 1 if the scan must end
  * and -ve on error.
@@ -109,8 +105,6 @@
 			goto out;
 		}
 		ret = -EIO;
-		if (++rs->cont_loops >= RR_MAX_CE_ENTRIES)
-			goto out;
 		bh = sb_bread(rs->inode->i_sb, rs->cont_extent);
 		if (bh) {
 			memcpy(rs->buffer, bh->b_data + rs->cont_offset,
@@ -294,16 +288,12 @@
 	goto out;
 }
 
-#define RR_REGARD_XA 1
-#define RR_RELOC_DE 2
-
 static int
 parse_rock_ridge_inode_internal(struct iso_directory_record *de,
-				struct inode *inode, int flags)
+				struct inode *inode, int regard_xa)
 {
 	int symlink_len = 0;
 	int cnt, sig;
-	unsigned int reloc_block;
 	struct inode *reloc;
 	struct rock_ridge *rr;
 	int rootflag;
@@ -315,7 +305,7 @@
 
 	init_rock_state(&rs, inode);
 	setup_rock_ridge(de, inode, &rs);
-	if (flags & RR_REGARD_XA) {
+	if (regard_xa) {
 		rs.chr += 14;
 		rs.len -= 14;
 		if (rs.len < 0)
@@ -362,9 +352,6 @@
 			rs.cont_size = isonum_733(rr->u.CE.size);
 			break;
 		case SIG('E', 'R'):
-			/* Invalid length of ER tag id? */
-			if (rr->u.ER.len_id + offsetof(struct rock_ridge, u.ER.data) > rr->len)
-				goto out;
 			ISOFS_SB(inode->i_sb)->s_rock = 1;
 			printk(KERN_DEBUG "ISO 9660 Extensions: ");
 			{
@@ -498,22 +485,12 @@
 					"relocated directory\n");
 			goto out;
 		case SIG('C', 'L'):
-			if (flags & RR_RELOC_DE) {
-				printk(KERN_ERR
-				       "ISOFS: Recursive directory relocation "
-				       "is not supported\n");
-				goto eio;
-			}
-			reloc_block = isonum_733(rr->u.CL.location);
-			if (reloc_block == ISOFS_I(inode)->i_iget5_block &&
-			    ISOFS_I(inode)->i_iget5_offset == 0) {
-				printk(KERN_ERR
-				       "ISOFS: Directory relocation points to "
-				       "itself\n");
-				goto eio;
-			}
-			ISOFS_I(inode)->i_first_extent = reloc_block;
-			reloc = isofs_iget_reloc(inode->i_sb, reloc_block, 0);
+			ISOFS_I(inode)->i_first_extent =
+			    isonum_733(rr->u.CL.location);
+			reloc =
+			    isofs_iget(inode->i_sb,
+				       ISOFS_I(inode)->i_first_extent,
+				       0);
 			if (IS_ERR(reloc)) {
 				ret = PTR_ERR(reloc);
 				goto out;
@@ -660,11 +637,9 @@
 	return rpnt;
 }
 
-int parse_rock_ridge_inode(struct iso_directory_record *de, struct inode *inode,
-			   int relocated)
+int parse_rock_ridge_inode(struct iso_directory_record *de, struct inode *inode)
 {
-	int flags = relocated ? RR_RELOC_DE : 0;
-	int result = parse_rock_ridge_inode_internal(de, inode, flags);
+	int result = parse_rock_ridge_inode_internal(de, inode, 0);
 
 	/*
 	 * if rockridge flag was reset and we didn't look for attributes
@@ -672,8 +647,7 @@
 	 */
 	if ((ISOFS_SB(inode->i_sb)->s_rock_offset == -1)
 	    && (ISOFS_SB(inode->i_sb)->s_rock == 2)) {
-		result = parse_rock_ridge_inode_internal(de, inode,
-							 flags | RR_REGARD_XA);
+		result = parse_rock_ridge_inode_internal(de, inode, 14);
 	}
 	return result;
 }
